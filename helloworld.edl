enclave {
    from "openenclave/edl/syscall.edl" import *;
    from "platform.edl" import *;

    include "stdint.h"

    trusted {

        public void initialize_attestation( [out] uint8_t** pk,
                                            [out] size_t* pk_len,
                                            [out] uint8_t** format_setting,
                                            [out] size_t* format_setting_len);

        public void generate_evidence(      [in, size=pk_len] const uint8_t* pk,
                                            size_t pk_len,
                                            [in, size=format_len] const uint8_t* format,
                                            size_t format_len,
                                            [out] uint8_t** evidence,
                                            [out] size_t* evidence_len);

        public bool finish_attestation(     [in, size=size] const uint8_t* data,
                                            size_t size);

        public void generate_message(       [out] uint8_t** data,
                                            [out] size_t*  size);

        public bool process_message(        [in, count=size] const uint8_t* data,
                                            size_t  size);

        public void build_bloom_filter(     [user_check] const uint32_t* data,
                                            size_t length,
                                            [out] uint8_t** output,
                                            [out] size_t*  output_size);


        public void match_bloom_filter(     [user_check] const uint32_t* data_key,
                                            [user_check] const uint32_t* data_val,
                                            size_t size,
                                            [user_check] const uint8_t* bloom_filter,
                                            size_t bloom_filter_size,
                                            [in, size=pubkey_size] const uint8_t* pubkey,
                                            size_t pubkey_size,
                                            [out] uint8_t** output,
                                            [out] size_t*  output_size);

        public void aggregate(              [user_check] const uint32_t* data_key,
                                            [user_check] const uint32_t* data_val,
                                            size_t size,
                                            [user_check] const uint8_t* peer_data,
                                            size_t peer_data_size,
                                            [in, size=pubkey_size] const uint8_t* pubkey,
                                            size_t pubkey_size,
                                            [out] uint8_t** output,
                                            [out] size_t*  output_size);
    };

    untrusted {
        // void host_helloworld();
    };
};
