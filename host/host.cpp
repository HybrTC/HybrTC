// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <time.h>
#include <cstdint>
#include <iostream>
#include <map>

#include "bloom_filter.hpp"
#include "hash.hpp"
#include "prng.hpp"
#include "prp.hpp"

constexpr size_t TEST_SIZE = (1 << 20);

std::map<uint32_t, uint32_t> random_dataset()
{
    PRNG<uint32_t> prng;

    std::map<uint32_t, uint32_t> dataset;

    for (size_t i = 0; i < TEST_SIZE; i++)
    {
        auto k = prng();
        if (dataset.find(k) == dataset.end())
        {
            dataset[k] = 1;
        }
        else
        {
            dataset[k]++;
        }
    }

    return dataset;
}

int test()
{
    // init
    auto dataset1 = random_dataset();
    auto dataset2 = random_dataset();

    PRP prp;
    BloomFilter<24, 4> filter;

    // find intersects
    std::vector<uint32_t> ground_t;
    std::vector<uint32_t> ground_f;

    for (auto& [k, v] : dataset2)
    {
        if (dataset1.find(k) == dataset1.end())
        {
            ground_f.push_back(k);
        }
        else
        {
            ground_t.push_back(k);
        }
    }

    // insert elements to the bloom filter
    for (auto& [k, v] : dataset1)
    {
        filter.insert(prp(k));
    }

    // check hits
    for (auto& k : ground_t)
    {
        if (!filter.lookup(prp(k)))
        {
            puts("error t");
        }
    }

    uint32_t fp = 0;
    for (auto& k : ground_f)
    {
        if (filter.lookup(prp(k)))
        {
            fp++;
        }
    }

    printf("T: %lu\n", ground_t.size());
    printf("FP: %u\n", fp);
    printf("FPR: %lf\n", fp / double(fp + ground_t.size()));

    return 0;
}

int main()
{
    clock_t t = clock();
    test();
    t = clock() - t;

    printf("Runtime: %lf s\n", double(t) / CLOCKS_PER_SEC);
}

#if 0

#include <openenclave/host.h>
#include <stdio.h>


// Include the untrusted helloworld header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the helloworld.edl file.
#include "helloworld_u.h"

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}

// This is the function that the enclave will call back into to
// print a message.
void host_helloworld()
{
    fprintf(stdout, "Enclave called into host to print: Hello World!\n");
}

int main(int argc, const char* argv[])
{
    oe_result_t result;
    int ret = 1;
    oe_enclave_t* enclave = NULL;

    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        goto exit;
    }

    // Create the enclave
    result = oe_create_helloworld_enclave(
        argv[1], OE_ENCLAVE_TYPE_AUTO, flags, NULL, 0, &enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_helloworld_enclave(): result=%u (%s)\n",
            result,
            oe_result_str(result));
        goto exit;
    }

    // Call into the enclave
    result = enclave_helloworld(enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "calling into enclave_helloworld failed: result=%u (%s)\n",
            result,
            oe_result_str(result));
        goto exit;
    }

    ret = 0;

exit:
    // Clean up the enclave if we created one
    if (enclave)
        oe_terminate_enclave(enclave);

    return ret;
}

#endif
